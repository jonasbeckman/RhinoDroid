Workspace subclass: #AndroidWorkspace	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Android-Workspace'!!AndroidWorkspace commentStamp: 'miki 12/2/2009 23:57' prior: 0!I'm a workspace for evaluating JavaScript on Android.!!AndroidWorkspace methodsFor: 'methods' stamp: 'MikaelKindborg 11/17/2009 14:08'!codePaneMenu: aMenu shifted: shifted 	aMenu add: 'Run on Android' target: self selector: #runOnAndroid.	aMenu addLine.	super codePaneMenu: aMenu shifted: shifted.	^aMenu.		! !!AndroidWorkspace methodsFor: 'methods' stamp: 'MikaelKindborg 11/30/2009 20:53'!evaluateJavaScript: code on: hostName port: port	| stream request response |	stream := SocketStream 		openConnectionToHostNamed: hostName port: port.	request := 'PUT JavaScript HTTP/1.0', String crlf, 			'Content-length: ', code size printString, String crlf, 			'Content-Type: application/javascript', String crlf, String crlf, 			code, String crlf.	[		stream nextPutAll: request.		stream flush.		response := stream upToEnd.	]	ensure: [stream close].	^ response.! !!AndroidWorkspace methodsFor: 'methods' stamp: 'MikaelKindborg 11/30/2009 19:25'!evaluateJavaScriptX: code on: hostName port: port	| timeOutSeconds socket request response |	Socket initializeNetwork.	timeOutSeconds := 10.	socket := Socket new.	socket 		connectTo: (NetNameResolver addressForName: hostName)		port: port		waitForConnectionFor: timeOutSeconds.	request := 'PUT JavaScript HTTP/1.0', String crlf, 			'Content-length: ', contents size printString, String crlf, 			'Content-Type: application/javascript', String crlf, String crlf, 			code.	socket sendData: request.	self halt.	response := socket receiveDataTimeout: timeOutSeconds.	socket closeAndDestroy.	^ response.! !!AndroidWorkspace methodsFor: 'methods' stamp: 'MikaelKindborg 11/17/2009 14:00'!open	"AndroidWorkspace new open"	AndroidWorkspace new openLabel: 'Android Workspace'.! !!AndroidWorkspace methodsFor: 'methods' stamp: 'miki 12/2/2009 23:55'!runOnAndroid	| selection result textToInsert index1 index2 |		selection := self textMorph selection string.	selection size > 0 ifFalse: [^self].	result := self sendCodeToJsServer: selection.	textToInsert := String cr, result, String cr.	index1 := self textMorph editor stopBlock stringIndex.	index2 := index1 + textToInsert size.	self textMorph cursorWrapped: index1.	self textMorph insertCharacters: textToInsert.	self textMorph selectFrom: index1 to: index2 - 1.	self textMorph editor selectAndScroll.		"self textMorph editor stopBlock stringIndex inspect."	"self textMorph editor deselect."		"self textMorph editor insertAndSelect: 'Hello' at: (self textMorph editor stopBlock stringIndex max: 1)."			"self textMorph selection string inspect."	"result := self sendCodeToJsServer: self textMorph selection string."	"	index1 := self textMorph editor stopBlock stringIndex.	index2 := index1 + result size.	self textMorph editor insertAndSelect: result at: index1.	self textMorph editor selectFrom: index1 + 2 to: index2."		"selectAndScroll"	"self		lineSelectAndEmptyCheck: [^ self].	aClass := SystemNavigation default				classFromPattern: (self selection string copyWithout: Character cr)				withCaption: 'choose a class to browse...'."! !!AndroidWorkspace methodsFor: 'methods' stamp: 'MikaelKindborg 11/30/2009 18:59'!sendCodeToJsServer: jsCode	^self 		evaluateJavaScript: jsCode 		on: '127.0.0.1'		port: 4042! !!AndroidWorkspace methodsFor: 'methods' stamp: 'MikaelKindborg 11/17/2009 14:31'!textMorph	| pluggableTextMorphs |	pluggableTextMorphs := self dependents select: [:obj | obj isKindOf: PluggableTextMorph].	pluggableTextMorphs ifEmpty: [ ^ true ]. "This case should normally not happen"	^ pluggableTextMorphs first textMorph! !